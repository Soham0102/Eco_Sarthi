{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\EcoSarthi-main\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  requireAdmin = false,\n  requireWorker = false\n}) {\n  const isAdmin = localStorage.getItem(\"isAdmin\") === \"true\";\n  const isWorker = localStorage.getItem(\"isWorker\") === \"true\";\n\n  // Admin-only routes\n  if (requireAdmin && !isAdmin) {\n    console.warn(\"Blocked non-admin access. Redirecting...\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin-login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Worker-only routes\n  if (requireWorker && !isWorker) {\n    console.warn(\"Blocked non-worker access. Redirecting...\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/worker-login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // General protected routes (admin or worker)\n  if (!requireAdmin && !requireWorker && !isAdmin && !isWorker) {\n    console.warn(\"Blocked unauthorized access. Redirecting...\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user-login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n}\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","requireAdmin","requireWorker","isAdmin","localStorage","getItem","isWorker","console","warn","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Documents/EcoSarthi-main/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nexport default function ProtectedRoute({ children, requireAdmin = false, requireWorker = false }) {\n  const isAdmin = localStorage.getItem(\"isAdmin\") === \"true\";\n  const isWorker = localStorage.getItem(\"isWorker\") === \"true\";\n\n  // Admin-only routes\n  if (requireAdmin && !isAdmin) {\n    console.warn(\"Blocked non-admin access. Redirecting...\");\n    return <Navigate to=\"/admin-login\" replace />;\n  }\n\n  // Worker-only routes\n  if (requireWorker && !isWorker) {\n    console.warn(\"Blocked non-worker access. Redirecting...\");\n    return <Navigate to=\"/worker-login\" replace />;\n  }\n\n  // General protected routes (admin or worker)\n  if (!requireAdmin && !requireWorker && !isAdmin && !isWorker) {\n    console.warn(\"Blocked unauthorized access. Redirecting...\");\n    return <Navigate to=\"/user-login\" replace />;\n  }\n\n  return children;\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC,YAAY,GAAG,KAAK;EAAEC,aAAa,GAAG;AAAM,CAAC,EAAE;EAChG,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM;EAC1D,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,MAAM;;EAE5D;EACA,IAAIJ,YAAY,IAAI,CAACE,OAAO,EAAE;IAC5BI,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;IACxD,oBAAOV,OAAA,CAACF,QAAQ;MAACa,EAAE,EAAC,cAAc;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC/C;;EAEA;EACA,IAAIZ,aAAa,IAAI,CAACI,QAAQ,EAAE;IAC9BC,OAAO,CAACC,IAAI,CAAC,2CAA2C,CAAC;IACzD,oBAAOV,OAAA,CAACF,QAAQ;MAACa,EAAE,EAAC,eAAe;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;;EAEA;EACA,IAAI,CAACb,YAAY,IAAI,CAACC,aAAa,IAAI,CAACC,OAAO,IAAI,CAACG,QAAQ,EAAE;IAC5DC,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC;IAC3D,oBAAOV,OAAA,CAACF,QAAQ;MAACa,EAAE,EAAC,aAAa;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC9C;EAEA,OAAOd,QAAQ;AACjB;AAACe,EAAA,GAvBuBhB,cAAc;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// export default function VoiceComplaint() {\n//   const [logs, setLogs] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [submitted, setSubmitted] = useState(false);\n//   const appendLog = (line) => {\n//     setLogs((prev) => [...prev, line]);\n//   };\n//   const handleVoiceComplaint = async () => {\n//     setLoading(true);\n//     setLogs([\"üéôÔ∏è Voice complaint started...\"]);\n//     setSubmitted(false);\n//     setComplaintId(null);\n//     try {\n//       // 1. Trigger the Python voice bot and get structured data\n//       const voiceRes = await axios.get(\"http://localhost:5000/api/\");\n//       if (voiceRes.data.status !== \"success\") {\n//         appendLog(\"‚ùå Voice bot error: \" + voiceRes.data.message);\n//         return;\n//       }\n//       const complaintData = voiceRes.data.data;\n//       appendLog(\"‚úÖ Voice bot finished. Data:\");\n//       appendLog(JSON.stringify(complaintData, null, 2));\n//       // 2. Send that same data to the complaints endpoint\n//       const formRes = await axios.post(\n//         \"http://localhost:5000/api/complaint\",\n//         {\n//           name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name,\n//           complaint: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint,\n//           location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location,\n//           // map any other fields if needed\n//         }\n//       );\n//       // 3. Capture and display the Complaint ID\n//       const newId = formRes.data.complaintId || formRes.data.complaintId;\n//       setComplaintId(newId);\n//       setSubmitted(true);\n//       appendLog(`üì¨ Complaint submitted. ID: ${newId}`);\n//     } catch (err) {\n//       appendLog(\"‚ùå Error: \" + err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   return (\n//     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\n//       <button\n//         onClick={handleVoiceComplaint}\n//         disabled={loading}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\n//       </button>\n//       <div className=\"mt-6 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\n//         {logs.map((line, i) => (\n//           <div key={i}>{line}</div>\n//         ))}\n//       </div>\n//       {submitted && (\n//         <div className=\"mt-6 text-green-700 font-semibold\">\n//           Complaint submitted successfully!<br />\n//           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\nimport React,{useState,useEffect}from\"react\";import{Phone,PhoneCall,Mic,MicOff,Volume2,VolumeX}from\"lucide-react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function VoiceComplaint(){const[callState,setCallState]=useState(\"idle\");// idle, calling, connected, ended\nconst[isListening,setIsListening]=useState(false);const[isSpeaking,setIsSpeaking]=useState(false);const[callDuration,setCallDuration]=useState(0);const[logs,setLogs]=useState([]);const[loading,setLoading]=useState(false);const[complaintId,setComplaintId]=useState(null);const[submitted,setSubmitted]=useState(false);const[currentStep,setCurrentStep]=useState(\"\");// Timer for call duration\nuseEffect(()=>{let interval;if(callState===\"connected\"){interval=setInterval(()=>{setCallDuration(prev=>prev+1);},1000);}return()=>clearInterval(interval);},[callState]);const formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=seconds%60;return`${mins.toString().padStart(2,'0')}:${secs.toString().padStart(2,'0')}`;};const appendLog=function(line){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"info\";setLogs(prev=>[...prev,{message:line,type,time:new Date().toLocaleTimeString()}]);};const startCall=async()=>{setCallState(\"calling\");setCallDuration(0);setLogs([]);setComplaintId(null);setSubmitted(false);setCurrentStep(\"Connecting to JantaVoice...\");// Simulate connecting\nsetTimeout(()=>{setCallState(\"connected\");setCurrentStep(\"Connected - Starting voice complaint process\");appendLog(\"üîó Connected to JantaVoice system\",\"success\");handleVoiceComplaint();},2000);};const endCall=()=>{setCallState(\"ended\");setIsListening(false);setIsSpeaking(false);setCurrentStep(submitted?\"Call completed successfully\":\"Call ended\");setTimeout(()=>{setCallState(\"idle\");setCurrentStep(\"\");},3000);};const handleVoiceComplaint=async()=>{setLoading(true);setIsSpeaking(true);appendLog(\"üéôÔ∏è Voice complaint started...\",\"info\");setCurrentStep(\"Processing voice input...\");try{// 1. Trigger the Python voice bot and get structured data\nsetCurrentStep(\"Connecting to voice bot...\");appendLog(\"üìû Connecting to voice bot system...\",\"info\");const voiceRes=await fetch(\"http://localhost:5000/api/voice-complaint\");const voiceData=await voiceRes.json();if(voiceData.status!==\"success\"){appendLog(\"‚ùå Voice bot error: \"+voiceData.message,\"error\");setCurrentStep(\"Voice bot connection failed\");setIsSpeaking(false);return;}const complaintData=voiceData.data;setIsSpeaking(false);setCurrentStep(\"Voice conversation completed\");appendLog(\"‚úÖ Voice bot finished. Data collected:\",\"success\");appendLog(JSON.stringify(complaintData,null,2),\"data\");// Show conversation details in a user-friendly way\nif(complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]){appendLog(`üìù Complaint: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}`,\"conversation\");}if(complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]){appendLog(`üìç Location: ${complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}`,\"conversation\");}if(complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]){appendLog(`üë§ Name: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}`,\"conversation\");}if(complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]){appendLog(`üì± Phone: ${complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}`,\"conversation\");}if(complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]){appendLog(`üè¢ Department: ${complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}`,\"conversation\");}// 2. Send that same data to the complaints endpoint\nsetCurrentStep(\"Submitting to admin dashboard...\");appendLog(\"üì§ Submitting complaint to admin dashboard...\",\"info\");const formRes=await fetch(\"http://localhost:5000/api/complaint\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({name:complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]||complaintData.name||\"Anonymous\",description:complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]||complaintData.complaint||\"No description\",location:complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]||complaintData.location||\"Unknown\",urgency:\"normal\",// Add missing urgency field\ndepartment:complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]||complaintData.department||\"General\"})});const formData=await formRes.json();// 3. Capture and display the Complaint ID\nconst newId=formData.complaintId||complaintData.complaint_id||\"CMP-\"+Date.now();setComplaintId(newId);setSubmitted(true);setCurrentStep(\"Complaint registered successfully!\");appendLog(`üì¨ Complaint submitted to admin dashboard!`,\"success\");appendLog(`üÜî Complaint ID: ${newId}`,\"success\");appendLog(\"‚úÖ Admin will review and take action soon\",\"success\");}catch(err){appendLog(\"‚ùå Error: \"+err.message,\"error\");setCurrentStep(\"Error occurred during processing\");}finally{setLoading(false);setIsSpeaking(false);setIsListening(false);}};const getLogIcon=type=>{switch(type){case\"success\":return\"‚úÖ\";case\"error\":return\"‚ùå\";case\"conversation\":return\"üí¨\";case\"data\":return\"üìä\";default:return\"‚ÑπÔ∏è\";}};const getLogColor=type=>{switch(type){case\"success\":return\"text-green-400\";case\"error\":return\"text-red-400\";case\"conversation\":return\"text-blue-400\";case\"data\":return\"text-yellow-400\";default:return\"text-gray-300\";}};return/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-md mx-auto mt-10 bg-gradient-to-b from-gray-900 to-gray-800 rounded-3xl p-6 text-white shadow-2xl\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center mb-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-2\",children:\"EcoSarthi\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-300\",children:\"\\u0906\\u0935\\u093E\\u091C\\u093C \\u0936\\u093F\\u0915\\u093E\\u092F\\u0924 \\u092A\\u094D\\u0930\\u0923\\u093E\\u0932\\u0940\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center mb-8\",children:[callState===\"idle\"&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center\",children:/*#__PURE__*/_jsx(Phone,{size:32})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lg\",children:\"\\u0915\\u0949\\u0932 \\u0915\\u0930\\u0928\\u0947 \\u0915\\u0947 \\u0932\\u093F\\u090F \\u0924\\u0948\\u092F\\u093E\\u0930\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-400\",children:\"\\u0935\\u0949\\u0907\\u0938 \\u0936\\u093F\\u0915\\u093E\\u092F\\u0924 \\u0936\\u0941\\u0930\\u0942 \\u0915\\u0930\\u0928\\u0947 \\u0915\\u0947 \\u0932\\u093F\\u090F \\u091F\\u0948\\u092A \\u0915\\u0930\\u0947\\u0902\"})]}),callState===\"calling\"&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-24 h-24 mx-auto mb-4 bg-yellow-600 rounded-full flex items-center justify-center animate-pulse\",children:/*#__PURE__*/_jsx(PhoneCall,{size:32})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lg\",children:\"Connecting...\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-400\",children:\"Please wait\"})]}),callState===\"connected\"&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center relative\",children:[/*#__PURE__*/_jsx(PhoneCall,{size:32}),(isListening||isSpeaking)&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute -inset-2 border-4 border-green-400 rounded-full animate-ping\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lg\",children:\"Connected\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-400\",children:[\"Duration: \",formatTime(callDuration)]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xs text-blue-400 mt-1\",children:currentStep})]}),callState===\"ended\"&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-24 h-24 mx-auto mb-4 bg-red-600 rounded-full flex items-center justify-center\",children:/*#__PURE__*/_jsx(Phone,{size:32})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-lg\",children:\"Call Ended\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-400\",children:complaintId?`Complaint ID: ${complaintId}`:\"Call completed\"})]})]}),callState===\"connected\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center space-x-8 mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`flex items-center space-x-2 ${isSpeaking?'text-blue-400':'text-gray-500'}`,children:[isSpeaking?/*#__PURE__*/_jsx(Volume2,{size:20}):/*#__PURE__*/_jsx(VolumeX,{size:20}),/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:\"Bot\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:`flex items-center space-x-2 ${isListening?'text-green-400':'text-gray-500'}`,children:[isListening?/*#__PURE__*/_jsx(Mic,{size:20}):/*#__PURE__*/_jsx(MicOff,{size:20}),/*#__PURE__*/_jsx(\"span\",{className:\"text-sm\",children:\"You\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-center space-x-4 mb-6\",children:[callState===\"idle\"&&/*#__PURE__*/_jsx(\"button\",{onClick:startCall,disabled:loading,className:\"w-16 h-16 bg-green-600 hover:bg-green-700 disabled:opacity-50 rounded-full flex items-center justify-center transition-colors\",children:/*#__PURE__*/_jsx(Phone,{size:24})}),(callState===\"connected\"||callState===\"calling\")&&/*#__PURE__*/_jsx(\"button\",{onClick:endCall,className:\"w-16 h-16 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center transition-colors\",children:/*#__PURE__*/_jsx(Phone,{size:24,className:\"transform rotate-45\"})})]}),logs.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-800 rounded-lg p-4 max-h-64 overflow-y-auto mb-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-400 mb-2\",children:\"Live Process Log:\"}),logs.map((log,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"mb-2 text-sm\",children:/*#__PURE__*/_jsxs(\"div\",{className:`${getLogColor(log.type)} break-words`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"mr-2\",children:getLogIcon(log.type)}),log.message,/*#__PURE__*/_jsx(\"div\",{className:\"text-xs opacity-50 ml-6\",children:log.time})]})},index))]}),submitted&&/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 bg-green-900 border border-green-600 rounded-lg text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-green-400 font-semibold\",children:\"\\u2705 Complaint Registered!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-green-300 mt-1\",children:[\"ID: \",complaintId]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xs text-green-200 mt-2\",children:\"Your complaint has been sent to the admin dashboard\"})]}),loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-center text-blue-400\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 mx-auto mb-2\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm\",children:\"Processing...\"})]})]});}// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// export default function VoiceComplaint() {\n//   // 1. State mirrors ComplaintForm\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     complaint: \"\",\n//     location: \"\",\n//     urgency: \"normal\",\n//   });\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [logs, setLogs] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   // helper to append to console‚Äëstyle logs\n//   const appendLog = (line) => setLogs((prev) => [...prev, line]);\n//   const handleVoiceComplaint = async () => {\n//     setLoading(true);\n//     setLogs([\"üéôÔ∏è Starting voice complaint...\"]);\n//     setSubmitted(false);\n//     setComplaintId(null);\n//     try {\n//       // 2. Trigger your backend voice route\n//       const voiceRes = await axios.get(\"http://localhost:5000/api/voice-complaint\");\n//       if (voiceRes.data.status !== \"success\") {\n//         appendLog(\"Thank You!\");\n//         return;\n//       }\n//       // 3. Pull out structured data\n//       const data = voiceRes.data.data;\n//       appendLog(\"‚úÖ Voice data received:\");\n//       appendLog(JSON.stringify(data, null, 2));\n//       // // 4. Map it into the exact same formData shape\n//       // const mapped = {\n//       //   name: data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || \"\",\n//       //   location: data[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || \"\",\n//       //   department: data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || \"\",\n//       //   description: data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || \"\",\n//       //   urgency: \"normal\",\n//       // };\n//       const aiData = voiceRes.data.data;\n//       const payload = {\n//         name: aiData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || \"\",\n//         location: aiData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || \"\",\n//         department: aiData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || \"\",\n//         description: aiData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || \"\",\n//       };\n//       await axios.post(\"http://localhost:5000/api/complaint\", payload);\n//       setFormData(mapped);\n//       // 5. POST to the same endpoint as ComplaintForm\n//       const res = await axios.post(\"http://localhost:5000/api/complaint\", mapped);\n//       setComplaintId(res.data.complaintId);\n//       setSubmitted(true);\n//       appendLog(`üì¨ Complaint submitted. ID: ${res.data.complaintId}`);\n//     } catch (err) {\n//       appendLog(\"‚ùå Submission error: \" + err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   return (\n//     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\n//       {/* Start button */}\n//       <button\n//         onClick={handleVoiceComplaint}\n//         disabled={loading}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\n//       </button>\n//       {/* Console logs */}\n//       <div className=\"mt-4 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\n//         {logs.length === 0 ? <div>Logs will appear here...</div> : logs.map((l, i) => <div key={i}>{l}</div>)}\n//       </div>\n//       {/* Confirmation */}\n//       {submitted && (\n//         <div className=\"mt-6 text-green-700 font-semibold\">\n//           Complaint submitted successfully!<br />\n//           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState, useEffect, useRef, useCallback } from \"react\";\n// import { \n//   Phone, \n//   PhoneOff, \n//   Mic, \n//   MicOff, \n//   Volume2, \n//   VolumeX, \n//   User, \n//   Bot, \n//   CheckCircle, \n//   AlertCircle, \n//   Clock,\n//   Signal,\n//   PhoneCall\n// } from \"lucide-react\";\n// export default function VoiceComplaint() {\n//   const [conversation, setConversation] = useState([]);\n//   const [isListening, setIsListening] = useState(false);\n//   const [isProcessing, setIsProcessing] = useState(false);\n//   const [isSpeaking, setIsSpeaking] = useState(false);\n//   const [callActive, setCallActive] = useState(false);\n//   const [callConnecting, setCallConnecting] = useState(false);\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [callStatus, setCallStatus] = useState('idle'); // idle, connecting, active, completed, error\n//   const [audioEnabled, setAudioEnabled] = useState(true);\n//   const [currentStep, setCurrentStep] = useState('');\n//   const [sessionId, setSessionId] = useState(null);\n//   const [connectionError, setConnectionError] = useState(null);\n//   const [callDuration, setCallDuration] = useState(0);\n//   const conversationRef = useRef(null);\n//   const eventSourceRef = useRef(null);\n//   const callStartTimeRef = useRef(null);\n//   const callTimerRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const maxReconnectAttempts = 3;\n//   const reconnectAttempts = useRef(0);\n//   // Auto-scroll to bottom when new messages arrive\n//   useEffect(() => {\n//     if (conversationRef.current) {\n//       conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\n//     }\n//   }, [conversation]);\n//   // Call duration timer\n//   useEffect(() => {\n//     if (callActive && callStartTimeRef.current) {\n//       callTimerRef.current = setInterval(() => {\n//         const elapsed = Math.floor((Date.now() - callStartTimeRef.current) / 1000);\n//         setCallDuration(elapsed);\n//       }, 1000);\n//     } else {\n//       if (callTimerRef.current) {\n//         clearInterval(callTimerRef.current);\n//         callTimerRef.current = null;\n//       }\n//     }\n//     return () => {\n//       if (callTimerRef.current) {\n//         clearInterval(callTimerRef.current);\n//       }\n//     };\n//   }, [callActive]);\n//   // Cleanup on component unmount\n//   useEffect(() => {\n//     return () => {\n//       endCall();\n//       if (reconnectTimeoutRef.current) {\n//         clearTimeout(reconnectTimeoutRef.current);\n//       }\n//     };\n//   }, []);\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n//   };\n//   const addMessage = useCallback((sender, message, type = 'text', metadata = {}) => {\n//     const newMessage = {\n//       id: Date.now() + Math.random(),\n//       sender, // 'bot' or 'user'\n//       message,\n//       type, // 'text', 'status', 'json', 'error', 'system'\n//       timestamp: new Date(),\n//       metadata\n//     };\n//     setConversation(prev => [...prev, newMessage]);\n//   }, []);\n//   const startCall = async () => {\n//     try {\n//       setCallConnecting(true);\n//       setCallStatus('connecting');\n//       setConversation([]);\n//       setConnectionError(null);\n//       reconnectAttempts.current = 0;\n//       addMessage('system', '‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...', 'status');\n//       // Start voice session\n//       const response = await fetch('http://localhost:5000/api/start-voice-session', { \n//         method: 'POST',\n//         credentials: 'include',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         }\n//       });\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       const data = await response.json();\n//       if (!data.success) {\n//         throw new Error(data.error || 'Failed to start session');\n//       }\n//       setSessionId(data.session_id);\n//       // Wait a moment for session to initialize\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n//       // Start SSE connection\n//       await setupSSEConnection();\n//     } catch (error) {\n//       console.error('Error starting call:', error);\n//       setConnectionError(error.message);\n//       addMessage('system', `‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: ${error.message}`, 'error');\n//       setCallConnecting(false);\n//       setCallStatus('error');\n//     }\n//   };\n//   const setupSSEConnection = async () => {\n//     try {\n//       // Close existing connection\n//       if (eventSourceRef.current) {\n//         eventSourceRef.current.close();\n//       }\n//       eventSourceRef.current = new EventSource('http://localhost:5000/api/voice-complaint-stream', {\n//         withCredentials: true\n//       });\n//       eventSourceRef.current.onopen = () => {\n//         console.log('SSE connection opened');\n//         setCallConnecting(false);\n//         setCallActive(true);\n//         setCallStatus('active');\n//         callStartTimeRef.current = Date.now();\n//         setCallDuration(0);\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§à', 'status');\n//         reconnectAttempts.current = 0;\n//       };\n//       eventSourceRef.current.onmessage = (event) => {\n//         try {\n//           const data = JSON.parse(event.data);\n//           handleRealtimeUpdate(data);\n//         } catch (error) {\n//           console.error('Error parsing SSE data:', error);\n//         }\n//       };\n//       eventSourceRef.current.onerror = (error) => {\n//         console.error('SSE Error:', error);\n//         if (reconnectAttempts.current < maxReconnectAttempts) {\n//           addMessage('system', '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ, ‡§™‡•Å‡§®‡§É ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...', 'status');\n//           reconnectAttempts.current += 1;\n//           reconnectTimeoutRef.current = setTimeout(() => {\n//             if (callActive) {\n//               setupSSEConnection();\n//             }\n//           }, 2000 * reconnectAttempts.current); // Exponential backoff\n//         } else {\n//           addMessage('system', '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§', 'error');\n//           endCall();\n//         }\n//       };\n//     } catch (error) {\n//       console.error('Error setting up SSE:', error);\n//       setConnectionError(error.message);\n//       endCall();\n//     }\n//   };\n//   const handleRealtimeUpdate = useCallback((data) => {\n//     if (!data || !data.type) return;\n//     console.log('Received update:', data.type, data);\n//     switch (data.type) {\n//       case 'connected':\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•Å‡§à', 'status');\n//         break;\n//       case 'bot_question':\n//       case 'bot_speaking':\n//         setIsSpeaking(true);\n//         setCurrentStep(data.step || '‡§¨‡•ã‡§ü ‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à');\n//         addMessage('bot', data.message, 'text', { step: data.step });\n//         // Simulate speaking duration based on message length\n//         const speakingDuration = Math.max(2000, data.message.length * 100);\n//         setTimeout(() => setIsSpeaking(false), speakingDuration);\n//         break;\n//       case 'listening_start':\n//         setIsListening(true);\n//         setIsSpeaking(false);\n//         setIsProcessing(false);\n//         setCurrentStep('‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');\n//         addMessage('system', '‡§Ö‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç...', 'status');\n//         break;\n//       case 'listening_end':\n//         setIsListening(false);\n//         setCurrentStep('‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');\n//         break;\n//       case 'user_response':\n//         setIsProcessing(false);\n//         addMessage('user', data.message, 'text');\n//         setCurrentStep('');\n//         break;\n//       case 'processing':\n//         setIsProcessing(true);\n//         setCurrentStep(data.message || '‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó...');\n//         break;\n//       case 'complaint_structured':\n//         setCallStatus('processing');\n//         addMessage('bot', '‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ:', 'status');\n//         if (data.data) {\n//           addMessage('bot', JSON.stringify(data.data, null, 2), 'json', { complaintData: data.data });\n//         }\n//         break;\n//       case 'complaint_submitted':\n//         setCallStatus('completed');\n//         setComplaintId(data.complaintId);\n//         addMessage('bot', `‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à!`, 'status');\n//         addMessage('bot', `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§®‡§Ç‡§¨‡§∞: ${data.complaintId}`, 'text', { complaintId: data.complaintId });\n//         setCurrentStep('‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à');\n//         // Auto end call after 5 seconds\n//         setTimeout(() => endCall(), 5000);\n//         break;\n//       case 'summary':\n//         addMessage('bot', data.message, 'status');\n//         break;\n//       case 'final_message':\n//         addMessage('bot', data.message, 'status');\n//         break;\n//       case 'error':\n//         addMessage('bot', data.message, 'error');\n//         setCallStatus('error');\n//         break;\n//       case 'retry':\n//         addMessage('system', data.message, 'status');\n//         break;\n//       case 'validation_error':\n//         addMessage('bot', data.message, 'error');\n//         break;\n//       case 'session_ended':\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à', 'status');\n//         endCall();\n//         break;\n//       case 'heartbeat':\n//         // Keep connection alive, don't show to user\n//         break;\n//       default:\n//         console.log('Unknown message type:', data.type, data);\n//     }\n//   }, [addMessage]);\n//   const endCall = async () => {\n//     try {\n//       // Stop backend session\n//       if (sessionId) {\n//         await fetch('http://localhost:5000/api/stop-voice-session', { \n//           method: 'POST',\n//           credentials: 'include'\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error stopping session:', error);\n//     }\n//     // Cleanup local state\n//     if (eventSourceRef.current) {\n//       eventSourceRef.current.close();\n//       eventSourceRef.current = null;\n//     }\n//     if (callTimerRef.current) {\n//       clearInterval(callTimerRef.current);\n//       callTimerRef.current = null;\n//     }\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//       reconnectTimeoutRef.current = null;\n//     }\n//     setCallActive(false);\n//     setCallConnecting(false);\n//     setIsListening(false);\n//     setIsProcessing(false);\n//     setIsSpeaking(false);\n//     setCurrentStep('');\n//     setSessionId(null);\n//     callStartTimeRef.current = null;\n//     setCallDuration(0);\n//     if (callStatus !== 'completed') {\n//       setCallStatus('idle');\n//       addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à', 'status');\n//     }\n//   };\n//   const formatMessage = (msg) => {\n//     if (msg.type === 'json') {\n//       try {\n//         const data = JSON.parse(msg.message);\n//         return (\n//           <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-2\">\n//             <h4 className=\"font-semibold text-blue-800 mb-2\">‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:</h4>\n//             <div className=\"space-y-1 text-sm\">\n//               {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] && (\n//                 <p><span className=\"font-medium\">‡§®‡§æ‡§Æ:</span> {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}</p>\n//               )}\n//               {data[\"‡§∏‡•ç‡§•‡§æ‡§®\"] && (\n//                 <p><span className=\"font-medium\">‡§∏‡•ç‡§•‡§æ‡§®:</span> {data[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}</p>\n//               )}\n//               {data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] && (\n//                 <p><span className=\"font-medium\">‡§µ‡§ø‡§≠‡§æ‡§ó:</span> {data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}</p>\n//               )}\n//               {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] && (\n//                 <p><span className=\"font-medium\">‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:</span> {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}</p>\n//               )}\n//               {data[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"] && (\n//                 <p><span className=\"font-medium\">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤:</span> {data[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}</p>\n//               )}\n//             </div>\n//           </div>\n//         );\n//       } catch (e) {\n//         return <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-x-auto\">{msg.message}</pre>;\n//       }\n//     }\n//     return msg.message;\n//   };\n//   const getMessageIcon = (msg) => {\n//     if (msg.sender === 'bot') {\n//       if (msg.type === 'error') return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n//       if (msg.type === 'status') return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n//       return <Bot className=\"w-4 h-4 text-blue-500\" />;\n//     }\n//     if (msg.sender === 'system') {\n//       return <Signal className=\"w-4 h-4 text-gray-500\" />;\n//     }\n//     return <User className=\"w-4 h-4 text-purple-500\" />;\n//   };\n//   const getCallStatusColor = () => {\n//     switch (callStatus) {\n//       case 'connecting': return 'text-yellow-600 bg-yellow-100 border-yellow-200';\n//       case 'active': return 'text-green-600 bg-green-100 border-green-200';\n//       case 'processing': return 'text-blue-600 bg-blue-100 border-blue-200';\n//       case 'completed': return 'text-green-600 bg-green-100 border-green-200';\n//       case 'error': return 'text-red-600 bg-red-100 border-red-200';\n//       default: return 'text-gray-600 bg-gray-100 border-gray-200';\n//     }\n//   };\n//   const getCallStatusText = () => {\n//     switch (callStatus) {\n//       case 'connecting': return '‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...';\n//       case 'active': return '‡§ï‡•â‡§≤ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø';\n//       case 'processing': return '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à';\n//       case 'completed': return '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•Ç‡§∞‡•ç‡§£';\n//       case 'error': return '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ';\n//       default: return '‡§§‡•à‡§Ø‡§æ‡§∞';\n//     }\n//   };\n//   return (\n//     <div className=\"max-w-4xl mx-auto mt-6 p-6 bg-white rounded-xl shadow-lg\">\n//       {/* Header */}\n//       <div className=\"text-center mb-6\">\n//         <div className=\"flex items-center justify-center mb-4\">\n//           <PhoneCall className=\"w-8 h-8 text-blue-600 mr-3\" />\n//           <h2 className=\"text-3xl font-bold text-gray-900\">‡§ú‡§®‡§§‡§æ ‡§µ‡•â‡§á‡§∏ ‡§ï‡•â‡§≤</h2>\n//         </div>\n//         <p className=\"text-gray-600\">‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç</p>\n//       </div>\n//       {/* Call Status Bar */}\n//       <div className={`flex items-center justify-between p-4 rounded-lg mb-6 border ${getCallStatusColor()}`}>\n//         <div className=\"flex items-center space-x-3\">\n//           <div className=\"flex items-center space-x-2\">\n//             {callConnecting && <Clock className=\"w-5 h-5 animate-spin\" />}\n//             {callActive && !isListening && !isSpeaking && !isProcessing && (\n//               <Signal className=\"w-5 h-5 animate-pulse\" />\n//             )}\n//             {isListening && <Mic className=\"w-5 h-5 animate-pulse text-green-600\" />}\n//             {isSpeaking && <Volume2 className=\"w-5 h-5 animate-pulse text-blue-600\" />}\n//             {isProcessing && <Clock className=\"w-5 h-5 animate-spin text-yellow-600\" />}\n//             <span className=\"font-medium\">\n//               {currentStep || getCallStatusText()}\n//             </span>\n//           </div>\n//         </div>\n//         <div className=\"text-sm font-mono\">\n//           {callActive && `${formatTime(callDuration)}`}\n//         </div>\n//       </div>\n//       {/* Call Control */}\n//       <div className=\"flex justify-center mb-6\">\n//         {!callActive && !callConnecting ? (\n//           <button\n//             onClick={startCall}\n//             disabled={callConnecting}\n//             className=\"flex items-center space-x-3 bg-green-600 text-white px-8 py-4 rounded-full hover:bg-green-700 transition-colors font-medium text-lg shadow-lg transform hover:scale-105\"\n//           >\n//             <Phone className=\"w-6 h-6\" />\n//             <span>‡§ï‡•â‡§≤ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç</span>\n//           </button>\n//         ) : (\n//           <button\n//             onClick={endCall}\n//             className=\"flex items-center space-x-3 bg-red-600 text-white px-8 py-4 rounded-full hover:bg-red-700 transition-colors font-medium text-lg shadow-lg transform hover:scale-105\"\n//           >\n//             <PhoneOff className=\"w-6 h-6\" />\n//             <span>‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç</span>\n//           </button>\n//         )}\n//       </div>\n//       {/* Connection Error */}\n//       {connectionError && (\n//         <div className=\"mb-4 p-3 bg-red-100 border border-red-200 text-red-700 rounded-lg\">\n//           <div className=\"flex items-center space-x-2\">\n//             <AlertCircle className=\"w-5 h-5\" />\n//             <span>‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§è‡§∞‡§∞: {connectionError}</span>\n//           </div>\n//         </div>\n//       )}\n//       {/* Call Log */}\n//       <div \n//         ref={conversationRef}\n//         className=\"bg-gray-900 text-white rounded-lg p-4 h-96 overflow-y-auto border border-gray-700\"\n//         style={{\n//           background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n//           fontFamily: 'monospace'\n//         }}\n//       >\n//         {conversation.length === 0 ? (\n//           <div className=\"flex items-center justify-center h-full text-gray-400\">\n//             <div className=\"text-center\">\n//               <PhoneCall className=\"w-12 h-12 mx-auto mb-3 text-gray-500\" />\n//               <p>‡§ï‡•â‡§≤ ‡§≤‡•â‡§ó ‡§Ø‡§π‡§æ‡§Å ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ú‡§æ‡§è‡§ó‡§æ...</p>\n//             </div>\n//           </div>\n//         ) : (\n//           <div className=\"space-y-3\">\n//             {conversation.map((msg) => (\n//               <div\n//                 key={msg.id}\n//                 className=\"flex items-start space-x-3\"\n//               >\n//                 <div className=\"flex-shrink-0 text-xs text-gray-400 w-16\">\n//                   {msg.timestamp.toLocaleTimeString('hi-IN', { \n//                     hour12: false,\n//                     hour: '2-digit',\n//                     minute: '2-digit',\n//                     second: '2-digit'\n//                   })}\n//                 </div>\n//                 <div className={`flex-shrink-0 p-1 rounded-full ${\n//                   msg.sender === 'user' ? 'bg-purple-600' : \n//                   msg.sender === 'system' ? 'bg-gray-600' :\n//                   msg.type === 'error' ? 'bg-red-600' :\n//                   msg.type === 'status' ? 'bg-green-600' : 'bg-blue-600'\n//                 }`}>\n//                   {getMessageIcon(msg)}\n//                 </div>\n//                 <div className=\"flex-1\">\n//                   <div className={`text-sm ${\n//                     msg.sender === 'user' \n//                       ? 'text-purple-300' \n//                       : msg.sender === 'system'\n//                       ? 'text-gray-300'\n//                       : msg.type === 'error'\n//                       ? 'text-red-300'\n//                       : msg.type === 'status'\n//                       ? 'text-green-300'\n//                       : 'text-blue-300'\n//                   }`}>\n//                     <span className=\"font-medium\">\n//                       {msg.sender === 'user' ? '‡§Ü‡§™' : \n//                        msg.sender === 'system' ? '‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ' : '‡§¨‡•â‡§ü'}:\n//                     </span>\n//                   </div>\n//                   <div className=\"text-white text-sm mt-1 break-words\">\n//                     {formatMessage(msg)}\n//                   </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n//       {/* Current Activity Indicator */}\n//       {callActive && (\n//         <div className=\"mt-4 flex items-center justify-center space-x-4 text-sm\">\n//           {isListening && (\n//             <div className=\"flex items-center space-x-2 bg-green-100 px-4 py-2 rounded-full border border-green-200\">\n//               <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n//               <Mic className=\"w-4 h-4 text-green-600\" />\n//               <span className=\"text-green-700 font-medium\">‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</span>\n//             </div>\n//           )}\n//           {isSpeaking && (\n//             <div className=\"flex items-center space-x-2 bg-blue-100 px-4 py-2 rounded-full border border-blue-200\">\n//               <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n//               <Volume2 className=\"w-4 h-4 text-blue-600\" />\n//               <span className=\"text-blue-700 font-medium\">‡§¨‡•â‡§ü ‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...</span>\n//             </div>\n//           )}\n//           {isProcessing && (\n//             <div className=\"flex items-center space-x-2 bg-yellow-100 px-4 py-2 rounded-full border border-yellow-200\">\n//               <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\n//               <Clock className=\"w-4 h-4 text-yellow-600\" />\n//               <span className=\"text-yellow-700 font-medium\">‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó...</span>\n//             </div>\n//           )}\n//         </div>\n//       )}\n//       {/* Final Result */}\n//       {complaintId && (\n//         <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <h3 className=\"font-semibold text-green-800 flex items-center space-x-2\">\n//                 <CheckCircle className=\"w-5 h-5\" />\n//                 <span>‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú!</span>\n//               </h3>\n//               <p className=\"text-green-700 mt-1\">\n//                 ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§®‡§Ç‡§¨‡§∞: <span className=\"font-mono font-bold text-lg\">{complaintId}</span>\n//               </p>\n//               <p className=\"text-green-600 text-sm mt-1\">\n//                 ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§™‡§æ‡§∏ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡•á‡§Ç\n//               </p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {/* Audio Controls */}\n//       <div className=\"mt-4 flex justify-center\">\n//         <button\n//           onClick={() => setAudioEnabled(!audioEnabled)}\n//           className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm ${\n//             audioEnabled \n//               ? 'bg-green-100 text-green-700 hover:bg-green-200' \n//               : 'bg-red-100 text-red-700 hover:bg-red-200'\n//           } transition-colors`}\n//         >\n//           {audioEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n//           <span>{audioEnabled ? '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç' : '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶'}</span>\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":["React","useState","useEffect","Phone","PhoneCall","Mic","MicOff","Volume2","VolumeX","jsx","_jsx","jsxs","_jsxs","VoiceComplaint","callState","setCallState","isListening","setIsListening","isSpeaking","setIsSpeaking","callDuration","setCallDuration","logs","setLogs","loading","setLoading","complaintId","setComplaintId","submitted","setSubmitted","currentStep","setCurrentStep","interval","setInterval","prev","clearInterval","formatTime","seconds","mins","Math","floor","secs","toString","padStart","appendLog","line","type","arguments","length","undefined","message","time","Date","toLocaleTimeString","startCall","setTimeout","handleVoiceComplaint","endCall","voiceRes","fetch","voiceData","json","status","complaintData","data","JSON","stringify","formRes","method","headers","body","name","description","complaint","location","urgency","department","formData","newId","complaint_id","now","err","getLogIcon","getLogColor","className","children","size","onClick","disabled","map","log","index"],"sources":["C:/Users/Lenovo/Documents/EcoSarthi-main/frontend/src/pages/VoiceComplaint.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function VoiceComplaint() {\n//   const [logs, setLogs] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [submitted, setSubmitted] = useState(false);\n\n//   const appendLog = (line) => {\n//     setLogs((prev) => [...prev, line]);\n//   };\n\n//   const handleVoiceComplaint = async () => {\n//     setLoading(true);\n//     setLogs([\"üéôÔ∏è Voice complaint started...\"]);\n//     setSubmitted(false);\n//     setComplaintId(null);\n\n//     try {\n//       // 1. Trigger the Python voice bot and get structured data\n//       const voiceRes = await axios.get(\"http://localhost:5000/api/\");\n//       if (voiceRes.data.status !== \"success\") {\n//         appendLog(\"‚ùå Voice bot error: \" + voiceRes.data.message);\n//         return;\n//       }\n\n//       const complaintData = voiceRes.data.data;\n//       appendLog(\"‚úÖ Voice bot finished. Data:\");\n//       appendLog(JSON.stringify(complaintData, null, 2));\n\n//       // 2. Send that same data to the complaints endpoint\n//       const formRes = await axios.post(\n//         \"http://localhost:5000/api/complaint\",\n//         {\n//           name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name,\n//           complaint: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint,\n//           location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location,\n//           // map any other fields if needed\n//         }\n//       );\n\n//       // 3. Capture and display the Complaint ID\n//       const newId = formRes.data.complaintId || formRes.data.complaintId;\n//       setComplaintId(newId);\n//       setSubmitted(true);\n//       appendLog(`üì¨ Complaint submitted. ID: ${newId}`);\n//     } catch (err) {\n//       appendLog(\"‚ùå Error: \" + err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\n//       <button\n//         onClick={handleVoiceComplaint}\n//         disabled={loading}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\n//       </button>\n\n//       <div className=\"mt-6 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\n//         {logs.map((line, i) => (\n//           <div key={i}>{line}</div>\n//         ))}\n//       </div>\n\n//       {submitted && (\n//         <div className=\"mt-6 text-green-700 font-semibold\">\n//           Complaint submitted successfully!<br />\n//           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { Phone, PhoneCall, Mic, MicOff, Volume2, VolumeX } from \"lucide-react\";\n\nexport default function VoiceComplaint() {\n  const [callState, setCallState] = useState(\"idle\"); // idle, calling, connected, ended\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [callDuration, setCallDuration] = useState(0);\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [complaintId, setComplaintId] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [currentStep, setCurrentStep] = useState(\"\");\n\n  // Timer for call duration\n  useEffect(() => {\n    let interval;\n    if (callState === \"connected\") {\n      interval = setInterval(() => {\n        setCallDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [callState]);\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const appendLog = (line, type = \"info\") => {\n    setLogs((prev) => [...prev, { message: line, type, time: new Date().toLocaleTimeString() }]);\n  };\n\n  const startCall = async () => {\n    setCallState(\"calling\");\n    setCallDuration(0);\n    setLogs([]);\n    setComplaintId(null);\n    setSubmitted(false);\n    setCurrentStep(\"Connecting to JantaVoice...\");\n    \n    // Simulate connecting\n    setTimeout(() => {\n      setCallState(\"connected\");\n      setCurrentStep(\"Connected - Starting voice complaint process\");\n      appendLog(\"üîó Connected to JantaVoice system\", \"success\");\n      handleVoiceComplaint();\n    }, 2000);\n  };\n\n  const endCall = () => {\n    setCallState(\"ended\");\n    setIsListening(false);\n    setIsSpeaking(false);\n    setCurrentStep(submitted ? \"Call completed successfully\" : \"Call ended\");\n    setTimeout(() => {\n      setCallState(\"idle\");\n      setCurrentStep(\"\");\n    }, 3000);\n  };\n\n  const handleVoiceComplaint = async () => {\n    setLoading(true);\n    setIsSpeaking(true);\n    appendLog(\"üéôÔ∏è Voice complaint started...\", \"info\");\n    setCurrentStep(\"Processing voice input...\");\n\n    try {\n      // 1. Trigger the Python voice bot and get structured data\n      setCurrentStep(\"Connecting to voice bot...\");\n      appendLog(\"üìû Connecting to voice bot system...\", \"info\");\n      \n      const voiceRes = await fetch(\"http://localhost:5000/api/voice-complaint\");\n      const voiceData = await voiceRes.json();\n      \n      if (voiceData.status !== \"success\") {\n        appendLog(\"‚ùå Voice bot error: \" + voiceData.message, \"error\");\n        setCurrentStep(\"Voice bot connection failed\");\n        setIsSpeaking(false);\n        return;\n      }\n\n      const complaintData = voiceData.data;\n      setIsSpeaking(false);\n      setCurrentStep(\"Voice conversation completed\");\n      appendLog(\"‚úÖ Voice bot finished. Data collected:\", \"success\");\n      appendLog(JSON.stringify(complaintData, null, 2), \"data\");\n\n      // Show conversation details in a user-friendly way\n      if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]) {\n        appendLog(`üìù Complaint: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}`, \"conversation\");\n      }\n      if (complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]) {\n        appendLog(`üìç Location: ${complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}`, \"conversation\");\n      }\n      if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]) {\n        appendLog(`üë§ Name: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}`, \"conversation\");\n      }\n      if (complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]) {\n        appendLog(`üì± Phone: ${complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}`, \"conversation\");\n      }\n      if (complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]) {\n        appendLog(`üè¢ Department: ${complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}`, \"conversation\");\n      }\n\n      // 2. Send that same data to the complaints endpoint\n      setCurrentStep(\"Submitting to admin dashboard...\");\n      appendLog(\"üì§ Submitting complaint to admin dashboard...\", \"info\");\n      \n      const formRes = await fetch(\"http://localhost:5000/api/complaint\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name || \"Anonymous\",\n            description: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint || \"No description\",\n            location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location || \"Unknown\",\n            urgency: \"normal\", // Add missing urgency field\n            department: complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || complaintData.department || \"General\",\n        }),\n\n      });\n\n      const formData = await formRes.json();\n\n      // 3. Capture and display the Complaint ID\n      const newId = formData.complaintId || complaintData.complaint_id || \"CMP-\" + Date.now();\n      setComplaintId(newId);\n      setSubmitted(true);\n      setCurrentStep(\"Complaint registered successfully!\");\n      appendLog(`üì¨ Complaint submitted to admin dashboard!`, \"success\");\n      appendLog(`üÜî Complaint ID: ${newId}`, \"success\");\n      appendLog(\"‚úÖ Admin will review and take action soon\", \"success\");\n\n    } catch (err) {\n      appendLog(\"‚ùå Error: \" + err.message, \"error\");\n      setCurrentStep(\"Error occurred during processing\");\n    } finally {\n      setLoading(false);\n      setIsSpeaking(false);\n      setIsListening(false);\n    }\n  };\n\n  const getLogIcon = (type) => {\n    switch (type) {\n      case \"success\": return \"‚úÖ\";\n      case \"error\": return \"‚ùå\";\n      case \"conversation\": return \"üí¨\";\n      case \"data\": return \"üìä\";\n      default: return \"‚ÑπÔ∏è\";\n    }\n  };\n\n  const getLogColor = (type) => {\n    switch (type) {\n      case \"success\": return \"text-green-400\";\n      case \"error\": return \"text-red-400\";\n      case \"conversation\": return \"text-blue-400\";\n      case \"data\": return \"text-yellow-400\";\n      default: return \"text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-10 bg-gradient-to-b from-gray-900 to-gray-800 rounded-3xl p-6 text-white shadow-2xl\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-xl font-semibold mb-2\">EcoSarthi</h2>\n        <div className=\"text-sm text-gray-300\">‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä</div>\n      </div>\n\n      {/* Call Status */}\n      <div className=\"text-center mb-8\">\n        {callState === \"idle\" && (\n          <div>\n            <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center\">\n              <Phone size={32} />\n            </div>\n            <div className=\"text-lg\">‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞</div>\n            <div className=\"text-sm text-gray-400\">‡§µ‡•â‡§á‡§∏ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç</div>\n          </div>\n        )}\n\n        {callState === \"calling\" && (\n          <div>\n            <div className=\"w-24 h-24 mx-auto mb-4 bg-yellow-600 rounded-full flex items-center justify-center animate-pulse\">\n              <PhoneCall size={32} />\n            </div>\n            <div className=\"text-lg\">Connecting...</div>\n            <div className=\"text-sm text-gray-400\">Please wait</div>\n          </div>\n        )}\n\n        {callState === \"connected\" && (\n          <div>\n            <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center relative\">\n              <PhoneCall size={32} />\n              {(isListening || isSpeaking) && (\n                <div className=\"absolute -inset-2 border-4 border-green-400 rounded-full animate-ping\"></div>\n              )}\n            </div>\n            <div className=\"text-lg\">Connected</div>\n            <div className=\"text-sm text-gray-400\">Duration: {formatTime(callDuration)}</div>\n            <div className=\"text-xs text-blue-400 mt-1\">{currentStep}</div>\n          </div>\n        )}\n\n        {callState === \"ended\" && (\n          <div>\n            <div className=\"w-24 h-24 mx-auto mb-4 bg-red-600 rounded-full flex items-center justify-center\">\n              <Phone size={32} />\n            </div>\n            <div className=\"text-lg\">Call Ended</div>\n            <div className=\"text-sm text-gray-400\">\n              {complaintId ? `Complaint ID: ${complaintId}` : \"Call completed\"}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Status Indicators */}\n      {callState === \"connected\" && (\n        <div className=\"flex justify-center space-x-8 mb-6\">\n          <div className={`flex items-center space-x-2 ${isSpeaking ? 'text-blue-400' : 'text-gray-500'}`}>\n            {isSpeaking ? <Volume2 size={20} /> : <VolumeX size={20} />}\n            <span className=\"text-sm\">Bot</span>\n          </div>\n          <div className={`flex items-center space-x-2 ${isListening ? 'text-green-400' : 'text-gray-500'}`}>\n            {isListening ? <Mic size={20} /> : <MicOff size={20} />}\n            <span className=\"text-sm\">You</span>\n          </div>\n        </div>\n      )}\n\n      {/* Call Controls */}\n      <div className=\"flex justify-center space-x-4 mb-6\">\n        {callState === \"idle\" && (\n          <button\n            onClick={startCall}\n            disabled={loading}\n            className=\"w-16 h-16 bg-green-600 hover:bg-green-700 disabled:opacity-50 rounded-full flex items-center justify-center transition-colors\"\n          >\n            <Phone size={24} />\n          </button>\n        )}\n\n        {(callState === \"connected\" || callState === \"calling\") && (\n          <button\n            onClick={endCall}\n            className=\"w-16 h-16 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center transition-colors\"\n          >\n            <Phone size={24} className=\"transform rotate-45\" />\n          </button>\n        )}\n      </div>\n\n      {/* Real-time Logs */}\n      {logs.length > 0 && (\n        <div className=\"bg-gray-800 rounded-lg p-4 max-h-64 overflow-y-auto mb-4\">\n          <div className=\"text-sm text-gray-400 mb-2\">Live Process Log:</div>\n          {logs.map((log, index) => (\n            <div key={index} className=\"mb-2 text-sm\">\n              <div className={`${getLogColor(log.type)} break-words`}>\n                <span className=\"mr-2\">{getLogIcon(log.type)}</span>\n                {log.message}\n                <div className=\"text-xs opacity-50 ml-6\">{log.time}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Success Message */}\n      {submitted && (\n        <div className=\"p-4 bg-green-900 border border-green-600 rounded-lg text-center\">\n          <div className=\"text-green-400 font-semibold\">‚úÖ Complaint Registered!</div>\n          <div className=\"text-sm text-green-300 mt-1\">ID: {complaintId}</div>\n          <div className=\"text-xs text-green-200 mt-2\">\n            Your complaint has been sent to the admin dashboard\n          </div>\n        </div>\n      )}\n\n      {/* Loading Indicator */}\n      {loading && (\n        <div className=\"text-center text-blue-400\">\n          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 mx-auto mb-2\"></div>\n          <div className=\"text-sm\">Processing...</div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// export default function VoiceComplaint() {\n//   // 1. State mirrors ComplaintForm\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     complaint: \"\",\n//     location: \"\",\n//     urgency: \"normal\",\n//   });\n\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [logs, setLogs] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   // helper to append to console‚Äëstyle logs\n//   const appendLog = (line) => setLogs((prev) => [...prev, line]);\n\n//   const handleVoiceComplaint = async () => {\n//     setLoading(true);\n//     setLogs([\"üéôÔ∏è Starting voice complaint...\"]);\n//     setSubmitted(false);\n//     setComplaintId(null);\n\n//     try {\n//       // 2. Trigger your backend voice route\n//       const voiceRes = await axios.get(\"http://localhost:5000/api/voice-complaint\");\n//       if (voiceRes.data.status !== \"success\") {\n//         appendLog(\"Thank You!\");\n//         return;\n//       }\n\n//       // 3. Pull out structured data\n//       const data = voiceRes.data.data;\n//       appendLog(\"‚úÖ Voice data received:\");\n//       appendLog(JSON.stringify(data, null, 2));\n\n\n//       // // 4. Map it into the exact same formData shape\n//       // const mapped = {\n//       //   name: data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || \"\",\n//       //   location: data[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || \"\",\n//       //   department: data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || \"\",\n//       //   description: data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || \"\",\n//       //   urgency: \"normal\",\n//       // };\n\n//       const aiData = voiceRes.data.data;\n\n//       const payload = {\n//         name: aiData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || \"\",\n//         location: aiData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || \"\",\n//         department: aiData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || \"\",\n//         description: aiData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || \"\",\n//       };\n\n//       await axios.post(\"http://localhost:5000/api/complaint\", payload);\n\n\n//       setFormData(mapped);\n\n//       // 5. POST to the same endpoint as ComplaintForm\n//       const res = await axios.post(\"http://localhost:5000/api/complaint\", mapped);\n//       setComplaintId(res.data.complaintId);\n//       setSubmitted(true);\n//       appendLog(`üì¨ Complaint submitted. ID: ${res.data.complaintId}`);\n//     } catch (err) {\n//       appendLog(\"‚ùå Submission error: \" + err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\n\n//       {/* Start button */}\n//       <button\n//         onClick={handleVoiceComplaint}\n//         disabled={loading}\n//         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\n//       >\n//         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\n//       </button>\n\n//       {/* Console logs */}\n//       <div className=\"mt-4 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\n//         {logs.length === 0 ? <div>Logs will appear here...</div> : logs.map((l, i) => <div key={i}>{l}</div>)}\n//       </div>\n\n//       {/* Confirmation */}\n//       {submitted && (\n//         <div className=\"mt-6 text-green-700 font-semibold\">\n//           Complaint submitted successfully!<br />\n//           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n// import React, { useState, useEffect, useRef, useCallback } from \"react\";\n// import { \n//   Phone, \n//   PhoneOff, \n//   Mic, \n//   MicOff, \n//   Volume2, \n//   VolumeX, \n//   User, \n//   Bot, \n//   CheckCircle, \n//   AlertCircle, \n//   Clock,\n//   Signal,\n//   PhoneCall\n// } from \"lucide-react\";\n\n// export default function VoiceComplaint() {\n//   const [conversation, setConversation] = useState([]);\n//   const [isListening, setIsListening] = useState(false);\n//   const [isProcessing, setIsProcessing] = useState(false);\n//   const [isSpeaking, setIsSpeaking] = useState(false);\n//   const [callActive, setCallActive] = useState(false);\n//   const [callConnecting, setCallConnecting] = useState(false);\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [callStatus, setCallStatus] = useState('idle'); // idle, connecting, active, completed, error\n//   const [audioEnabled, setAudioEnabled] = useState(true);\n//   const [currentStep, setCurrentStep] = useState('');\n//   const [sessionId, setSessionId] = useState(null);\n//   const [connectionError, setConnectionError] = useState(null);\n//   const [callDuration, setCallDuration] = useState(0);\n  \n//   const conversationRef = useRef(null);\n//   const eventSourceRef = useRef(null);\n//   const callStartTimeRef = useRef(null);\n//   const callTimerRef = useRef(null);\n//   const reconnectTimeoutRef = useRef(null);\n//   const maxReconnectAttempts = 3;\n//   const reconnectAttempts = useRef(0);\n\n//   // Auto-scroll to bottom when new messages arrive\n//   useEffect(() => {\n//     if (conversationRef.current) {\n//       conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\n//     }\n//   }, [conversation]);\n\n//   // Call duration timer\n//   useEffect(() => {\n//     if (callActive && callStartTimeRef.current) {\n//       callTimerRef.current = setInterval(() => {\n//         const elapsed = Math.floor((Date.now() - callStartTimeRef.current) / 1000);\n//         setCallDuration(elapsed);\n//       }, 1000);\n//     } else {\n//       if (callTimerRef.current) {\n//         clearInterval(callTimerRef.current);\n//         callTimerRef.current = null;\n//       }\n//     }\n\n//     return () => {\n//       if (callTimerRef.current) {\n//         clearInterval(callTimerRef.current);\n//       }\n//     };\n//   }, [callActive]);\n\n//   // Cleanup on component unmount\n//   useEffect(() => {\n//     return () => {\n//       endCall();\n//       if (reconnectTimeoutRef.current) {\n//         clearTimeout(reconnectTimeoutRef.current);\n//       }\n//     };\n//   }, []);\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n//   };\n\n//   const addMessage = useCallback((sender, message, type = 'text', metadata = {}) => {\n//     const newMessage = {\n//       id: Date.now() + Math.random(),\n//       sender, // 'bot' or 'user'\n//       message,\n//       type, // 'text', 'status', 'json', 'error', 'system'\n//       timestamp: new Date(),\n//       metadata\n//     };\n//     setConversation(prev => [...prev, newMessage]);\n//   }, []);\n\n//   const startCall = async () => {\n//     try {\n//       setCallConnecting(true);\n//       setCallStatus('connecting');\n//       setConversation([]);\n//       setConnectionError(null);\n//       reconnectAttempts.current = 0;\n      \n//       addMessage('system', '‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...', 'status');\n      \n//       // Start voice session\n//       const response = await fetch('http://localhost:5000/api/start-voice-session', { \n//         method: 'POST',\n//         credentials: 'include',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         }\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n\n//       const data = await response.json();\n      \n//       if (!data.success) {\n//         throw new Error(data.error || 'Failed to start session');\n//       }\n\n//       setSessionId(data.session_id);\n      \n//       // Wait a moment for session to initialize\n//       await new Promise(resolve => setTimeout(resolve, 1000));\n      \n//       // Start SSE connection\n//       await setupSSEConnection();\n      \n//     } catch (error) {\n//       console.error('Error starting call:', error);\n//       setConnectionError(error.message);\n//       addMessage('system', `‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: ${error.message}`, 'error');\n//       setCallConnecting(false);\n//       setCallStatus('error');\n//     }\n//   };\n\n//   const setupSSEConnection = async () => {\n//     try {\n//       // Close existing connection\n//       if (eventSourceRef.current) {\n//         eventSourceRef.current.close();\n//       }\n\n//       eventSourceRef.current = new EventSource('http://localhost:5000/api/voice-complaint-stream', {\n//         withCredentials: true\n//       });\n      \n//       eventSourceRef.current.onopen = () => {\n//         console.log('SSE connection opened');\n//         setCallConnecting(false);\n//         setCallActive(true);\n//         setCallStatus('active');\n//         callStartTimeRef.current = Date.now();\n//         setCallDuration(0);\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§ó‡§à', 'status');\n//         reconnectAttempts.current = 0;\n//       };\n\n//       eventSourceRef.current.onmessage = (event) => {\n//         try {\n//           const data = JSON.parse(event.data);\n//           handleRealtimeUpdate(data);\n//         } catch (error) {\n//           console.error('Error parsing SSE data:', error);\n//         }\n//       };\n\n//       eventSourceRef.current.onerror = (error) => {\n//         console.error('SSE Error:', error);\n        \n//         if (reconnectAttempts.current < maxReconnectAttempts) {\n//           addMessage('system', '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ, ‡§™‡•Å‡§®‡§É ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...', 'status');\n//           reconnectAttempts.current += 1;\n          \n//           reconnectTimeoutRef.current = setTimeout(() => {\n//             if (callActive) {\n//               setupSSEConnection();\n//             }\n//           }, 2000 * reconnectAttempts.current); // Exponential backoff\n//         } else {\n//           addMessage('system', '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§', 'error');\n//           endCall();\n//         }\n//       };\n\n//     } catch (error) {\n//       console.error('Error setting up SSE:', error);\n//       setConnectionError(error.message);\n//       endCall();\n//     }\n//   };\n\n//   const handleRealtimeUpdate = useCallback((data) => {\n//     if (!data || !data.type) return;\n\n//     console.log('Received update:', data.type, data);\n\n//     switch (data.type) {\n//       case 'connected':\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•Å‡§à', 'status');\n//         break;\n\n//       case 'bot_question':\n//       case 'bot_speaking':\n//         setIsSpeaking(true);\n//         setCurrentStep(data.step || '‡§¨‡•ã‡§ü ‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à');\n//         addMessage('bot', data.message, 'text', { step: data.step });\n//         // Simulate speaking duration based on message length\n//         const speakingDuration = Math.max(2000, data.message.length * 100);\n//         setTimeout(() => setIsSpeaking(false), speakingDuration);\n//         break;\n        \n//       case 'listening_start':\n//         setIsListening(true);\n//         setIsSpeaking(false);\n//         setIsProcessing(false);\n//         setCurrentStep('‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');\n//         addMessage('system', '‡§Ö‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç...', 'status');\n//         break;\n        \n//       case 'listening_end':\n//         setIsListening(false);\n//         setCurrentStep('‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...');\n//         break;\n        \n//       case 'user_response':\n//         setIsProcessing(false);\n//         addMessage('user', data.message, 'text');\n//         setCurrentStep('');\n//         break;\n        \n//       case 'processing':\n//         setIsProcessing(true);\n//         setCurrentStep(data.message || '‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó...');\n//         break;\n        \n//       case 'complaint_structured':\n//         setCallStatus('processing');\n//         addMessage('bot', '‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ:', 'status');\n//         if (data.data) {\n//           addMessage('bot', JSON.stringify(data.data, null, 2), 'json', { complaintData: data.data });\n//         }\n//         break;\n        \n//       case 'complaint_submitted':\n//         setCallStatus('completed');\n//         setComplaintId(data.complaintId);\n//         addMessage('bot', `‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à!`, 'status');\n//         addMessage('bot', `‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§®‡§Ç‡§¨‡§∞: ${data.complaintId}`, 'text', { complaintId: data.complaintId });\n//         setCurrentStep('‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à');\n//         // Auto end call after 5 seconds\n//         setTimeout(() => endCall(), 5000);\n//         break;\n        \n//       case 'summary':\n//         addMessage('bot', data.message, 'status');\n//         break;\n        \n//       case 'final_message':\n//         addMessage('bot', data.message, 'status');\n//         break;\n        \n//       case 'error':\n//         addMessage('bot', data.message, 'error');\n//         setCallStatus('error');\n//         break;\n\n//       case 'retry':\n//         addMessage('system', data.message, 'status');\n//         break;\n\n//       case 'validation_error':\n//         addMessage('bot', data.message, 'error');\n//         break;\n\n//       case 'session_ended':\n//         addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à', 'status');\n//         endCall();\n//         break;\n\n//       case 'heartbeat':\n//         // Keep connection alive, don't show to user\n//         break;\n        \n//       default:\n//         console.log('Unknown message type:', data.type, data);\n//     }\n//   }, [addMessage]);\n\n//   const endCall = async () => {\n//     try {\n//       // Stop backend session\n//       if (sessionId) {\n//         await fetch('http://localhost:5000/api/stop-voice-session', { \n//           method: 'POST',\n//           credentials: 'include'\n//         });\n//       }\n//     } catch (error) {\n//       console.error('Error stopping session:', error);\n//     }\n\n//     // Cleanup local state\n//     if (eventSourceRef.current) {\n//       eventSourceRef.current.close();\n//       eventSourceRef.current = null;\n//     }\n\n//     if (callTimerRef.current) {\n//       clearInterval(callTimerRef.current);\n//       callTimerRef.current = null;\n//     }\n\n//     if (reconnectTimeoutRef.current) {\n//       clearTimeout(reconnectTimeoutRef.current);\n//       reconnectTimeoutRef.current = null;\n//     }\n\n//     setCallActive(false);\n//     setCallConnecting(false);\n//     setIsListening(false);\n//     setIsProcessing(false);\n//     setIsSpeaking(false);\n//     setCurrentStep('');\n//     setSessionId(null);\n//     callStartTimeRef.current = null;\n//     setCallDuration(0);\n    \n//     if (callStatus !== 'completed') {\n//       setCallStatus('idle');\n//       addMessage('system', '‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§à', 'status');\n//     }\n//   };\n\n//   const formatMessage = (msg) => {\n//     if (msg.type === 'json') {\n//       try {\n//         const data = JSON.parse(msg.message);\n//         return (\n//           <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-2\">\n//             <h4 className=\"font-semibold text-blue-800 mb-2\">‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:</h4>\n//             <div className=\"space-y-1 text-sm\">\n//               {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] && (\n//                 <p><span className=\"font-medium\">‡§®‡§æ‡§Æ:</span> {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}</p>\n//               )}\n//               {data[\"‡§∏‡•ç‡§•‡§æ‡§®\"] && (\n//                 <p><span className=\"font-medium\">‡§∏‡•ç‡§•‡§æ‡§®:</span> {data[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}</p>\n//               )}\n//               {data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] && (\n//                 <p><span className=\"font-medium\">‡§µ‡§ø‡§≠‡§æ‡§ó:</span> {data[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}</p>\n//               )}\n//               {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] && (\n//                 <p><span className=\"font-medium\">‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:</span> {data[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}</p>\n//               )}\n//               {data[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"] && (\n//                 <p><span className=\"font-medium\">‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤:</span> {data[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}</p>\n//               )}\n//             </div>\n//           </div>\n//         );\n//       } catch (e) {\n//         return <pre className=\"text-xs bg-gray-100 p-2 rounded overflow-x-auto\">{msg.message}</pre>;\n//       }\n//     }\n//     return msg.message;\n//   };\n\n//   const getMessageIcon = (msg) => {\n//     if (msg.sender === 'bot') {\n//       if (msg.type === 'error') return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n//       if (msg.type === 'status') return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n//       return <Bot className=\"w-4 h-4 text-blue-500\" />;\n//     }\n//     if (msg.sender === 'system') {\n//       return <Signal className=\"w-4 h-4 text-gray-500\" />;\n//     }\n//     return <User className=\"w-4 h-4 text-purple-500\" />;\n//   };\n\n//   const getCallStatusColor = () => {\n//     switch (callStatus) {\n//       case 'connecting': return 'text-yellow-600 bg-yellow-100 border-yellow-200';\n//       case 'active': return 'text-green-600 bg-green-100 border-green-200';\n//       case 'processing': return 'text-blue-600 bg-blue-100 border-blue-200';\n//       case 'completed': return 'text-green-600 bg-green-100 border-green-200';\n//       case 'error': return 'text-red-600 bg-red-100 border-red-200';\n//       default: return 'text-gray-600 bg-gray-100 border-gray-200';\n//     }\n//   };\n\n//   const getCallStatusText = () => {\n//     switch (callStatus) {\n//       case 'connecting': return '‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...';\n//       case 'active': return '‡§ï‡•â‡§≤ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø';\n//       case 'processing': return '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à';\n//       case 'completed': return '‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•Ç‡§∞‡•ç‡§£';\n//       case 'error': return '‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ';\n//       default: return '‡§§‡•à‡§Ø‡§æ‡§∞';\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-4xl mx-auto mt-6 p-6 bg-white rounded-xl shadow-lg\">\n//       {/* Header */}\n//       <div className=\"text-center mb-6\">\n//         <div className=\"flex items-center justify-center mb-4\">\n//           <PhoneCall className=\"w-8 h-8 text-blue-600 mr-3\" />\n//           <h2 className=\"text-3xl font-bold text-gray-900\">‡§ú‡§®‡§§‡§æ ‡§µ‡•â‡§á‡§∏ ‡§ï‡•â‡§≤</h2>\n//         </div>\n//         <p className=\"text-gray-600\">‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç</p>\n//       </div>\n\n//       {/* Call Status Bar */}\n//       <div className={`flex items-center justify-between p-4 rounded-lg mb-6 border ${getCallStatusColor()}`}>\n//         <div className=\"flex items-center space-x-3\">\n//           <div className=\"flex items-center space-x-2\">\n//             {callConnecting && <Clock className=\"w-5 h-5 animate-spin\" />}\n//             {callActive && !isListening && !isSpeaking && !isProcessing && (\n//               <Signal className=\"w-5 h-5 animate-pulse\" />\n//             )}\n//             {isListening && <Mic className=\"w-5 h-5 animate-pulse text-green-600\" />}\n//             {isSpeaking && <Volume2 className=\"w-5 h-5 animate-pulse text-blue-600\" />}\n//             {isProcessing && <Clock className=\"w-5 h-5 animate-spin text-yellow-600\" />}\n//             <span className=\"font-medium\">\n//               {currentStep || getCallStatusText()}\n//             </span>\n//           </div>\n//         </div>\n//         <div className=\"text-sm font-mono\">\n//           {callActive && `${formatTime(callDuration)}`}\n//         </div>\n//       </div>\n\n//       {/* Call Control */}\n//       <div className=\"flex justify-center mb-6\">\n//         {!callActive && !callConnecting ? (\n//           <button\n//             onClick={startCall}\n//             disabled={callConnecting}\n//             className=\"flex items-center space-x-3 bg-green-600 text-white px-8 py-4 rounded-full hover:bg-green-700 transition-colors font-medium text-lg shadow-lg transform hover:scale-105\"\n//           >\n//             <Phone className=\"w-6 h-6\" />\n//             <span>‡§ï‡•â‡§≤ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç</span>\n//           </button>\n//         ) : (\n//           <button\n//             onClick={endCall}\n//             className=\"flex items-center space-x-3 bg-red-600 text-white px-8 py-4 rounded-full hover:bg-red-700 transition-colors font-medium text-lg shadow-lg transform hover:scale-105\"\n//           >\n//             <PhoneOff className=\"w-6 h-6\" />\n//             <span>‡§ï‡•â‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç</span>\n//           </button>\n//         )}\n//       </div>\n\n//       {/* Connection Error */}\n//       {connectionError && (\n//         <div className=\"mb-4 p-3 bg-red-100 border border-red-200 text-red-700 rounded-lg\">\n//           <div className=\"flex items-center space-x-2\">\n//             <AlertCircle className=\"w-5 h-5\" />\n//             <span>‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§è‡§∞‡§∞: {connectionError}</span>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Call Log */}\n//       <div \n//         ref={conversationRef}\n//         className=\"bg-gray-900 text-white rounded-lg p-4 h-96 overflow-y-auto border border-gray-700\"\n//         style={{\n//           background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n//           fontFamily: 'monospace'\n//         }}\n//       >\n//         {conversation.length === 0 ? (\n//           <div className=\"flex items-center justify-center h-full text-gray-400\">\n//             <div className=\"text-center\">\n//               <PhoneCall className=\"w-12 h-12 mx-auto mb-3 text-gray-500\" />\n//               <p>‡§ï‡•â‡§≤ ‡§≤‡•â‡§ó ‡§Ø‡§π‡§æ‡§Å ‡§¶‡§ø‡§ñ‡§æ‡§à ‡§ú‡§æ‡§è‡§ó‡§æ...</p>\n//             </div>\n//           </div>\n//         ) : (\n//           <div className=\"space-y-3\">\n//             {conversation.map((msg) => (\n//               <div\n//                 key={msg.id}\n//                 className=\"flex items-start space-x-3\"\n//               >\n//                 <div className=\"flex-shrink-0 text-xs text-gray-400 w-16\">\n//                   {msg.timestamp.toLocaleTimeString('hi-IN', { \n//                     hour12: false,\n//                     hour: '2-digit',\n//                     minute: '2-digit',\n//                     second: '2-digit'\n//                   })}\n//                 </div>\n//                 <div className={`flex-shrink-0 p-1 rounded-full ${\n//                   msg.sender === 'user' ? 'bg-purple-600' : \n//                   msg.sender === 'system' ? 'bg-gray-600' :\n//                   msg.type === 'error' ? 'bg-red-600' :\n//                   msg.type === 'status' ? 'bg-green-600' : 'bg-blue-600'\n//                 }`}>\n//                   {getMessageIcon(msg)}\n//                 </div>\n//                 <div className=\"flex-1\">\n//                   <div className={`text-sm ${\n//                     msg.sender === 'user' \n//                       ? 'text-purple-300' \n//                       : msg.sender === 'system'\n//                       ? 'text-gray-300'\n//                       : msg.type === 'error'\n//                       ? 'text-red-300'\n//                       : msg.type === 'status'\n//                       ? 'text-green-300'\n//                       : 'text-blue-300'\n//                   }`}>\n//                     <span className=\"font-medium\">\n//                       {msg.sender === 'user' ? '‡§Ü‡§™' : \n//                        msg.sender === 'system' ? '‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ' : '‡§¨‡•â‡§ü'}:\n//                     </span>\n//                   </div>\n//                   <div className=\"text-white text-sm mt-1 break-words\">\n//                     {formatMessage(msg)}\n//                   </div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Current Activity Indicator */}\n//       {callActive && (\n//         <div className=\"mt-4 flex items-center justify-center space-x-4 text-sm\">\n//           {isListening && (\n//             <div className=\"flex items-center space-x-2 bg-green-100 px-4 py-2 rounded-full border border-green-200\">\n//               <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n//               <Mic className=\"w-4 h-4 text-green-600\" />\n//               <span className=\"text-green-700 font-medium\">‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</span>\n//             </div>\n//           )}\n//           {isSpeaking && (\n//             <div className=\"flex items-center space-x-2 bg-blue-100 px-4 py-2 rounded-full border border-blue-200\">\n//               <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n//               <Volume2 className=\"w-4 h-4 text-blue-600\" />\n//               <span className=\"text-blue-700 font-medium\">‡§¨‡•â‡§ü ‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...</span>\n//             </div>\n//           )}\n//           {isProcessing && (\n//             <div className=\"flex items-center space-x-2 bg-yellow-100 px-4 py-2 rounded-full border border-yellow-200\">\n//               <div className=\"w-2 h-2 bg-yellow-500 rounded-full animate-pulse\"></div>\n//               <Clock className=\"w-4 h-4 text-yellow-600\" />\n//               <span className=\"text-yellow-700 font-medium\">‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó...</span>\n//             </div>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Final Result */}\n//       {complaintId && (\n//         <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <h3 className=\"font-semibold text-green-800 flex items-center space-x-2\">\n//                 <CheckCircle className=\"w-5 h-5\" />\n//                 <span>‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú!</span>\n//               </h3>\n//               <p className=\"text-green-700 mt-1\">\n//                 ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§®‡§Ç‡§¨‡§∞: <span className=\"font-mono font-bold text-lg\">{complaintId}</span>\n//               </p>\n//               <p className=\"text-green-600 text-sm mt-1\">\n//                 ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§®‡§Ç‡§¨‡§∞ ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§™‡§æ‡§∏ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§ñ‡•á‡§Ç\n//               </p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Audio Controls */}\n//       <div className=\"mt-4 flex justify-center\">\n//         <button\n//           onClick={() => setAudioEnabled(!audioEnabled)}\n//           className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm ${\n//             audioEnabled \n//               ? 'bg-green-100 text-green-700 hover:bg-green-200' \n//               : 'bg-red-100 text-red-700 hover:bg-red-200'\n//           } transition-colors`}\n//         >\n//           {audioEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n//           <span>{audioEnabled ? '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç' : '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§¨‡§Ç‡§¶'}</span>\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }"],"mappings":"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CA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}